#!/bin/bash

# Pre-commit hook for formatting HTML, CSS, and JavaScript files using Prettier
# Only runs when these file types are staged for commit

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üé® Running Prettier formatter on staged files...${NC}"

# Get list of staged files by type
staged_html_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(html|htm)$' || true)
staged_css_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.css$' || true)
staged_js_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.js$' || true)

# Count total files to format
total_files=0
[ -n "$staged_html_files" ] && total_files=$((total_files + $(echo "$staged_html_files" | wc -w)))
[ -n "$staged_css_files" ] && total_files=$((total_files + $(echo "$staged_css_files" | wc -w)))
[ -n "$staged_js_files" ] && total_files=$((total_files + $(echo "$staged_js_files" | wc -w)))

if [ $total_files -eq 0 ]; then
    echo -e "${GREEN}‚úÖ No HTML, CSS, or JavaScript files to format${NC}"
    exit 0
fi

# Check if prettier is available (via npx)
if ! command -v npx &> /dev/null; then
    echo -e "${RED}‚ùå npx not found. Please install Node.js${NC}"
    exit 1
fi

# Test if prettier can run
if ! npx prettier --version &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Prettier not found. Installing via npx...${NC}"
fi

# Track results
formatted_files=()
failed_files=()

# Function to format files
format_files() {
    local file_type="$1"
    local files="$2"
    local prettier_args="$3"
    
    if [ -n "$files" ]; then
        echo -e "${YELLOW}üìù Formatting $file_type files...${NC}"
        
        for file in $files; do
            if [ -f "$file" ]; then
                echo -e "${YELLOW}   Processing: $file${NC}"
                
                # Create backup
                cp "$file" "$file.backup"
                
                # Run prettier with specified configuration
                if npx prettier --write $prettier_args "$file" 2>/dev/null; then
                    # Check if file was modified
                    if ! cmp -s "$file" "$file.backup"; then
                        formatted_files+=("$file")
                        # Re-stage the formatted file
                        git add "$file"
                        echo -e "${GREEN}   ‚ú® Formatted and re-staged: $file${NC}"
                    else
                        echo -e "${GREEN}   ‚úÖ No changes needed: $file${NC}"
                    fi
                else
                    # Restore backup if prettier failed
                    mv "$file.backup" "$file"
                    failed_files+=("$file")
                    echo -e "${RED}   ‚ùå Failed to format: $file${NC}"
                fi
                
                # Remove backup if it still exists
                [ -f "$file.backup" ] && rm "$file.backup"
            else
                echo -e "${RED}   ‚ùå File not found: $file${NC}"
                failed_files+=("$file")
            fi
        done
    fi
}

# Format different file types
format_files "HTML" "$staged_html_files" "--use-tabs --print-width 120 --bracket-same-line"
format_files "CSS" "$staged_css_files" "--use-tabs --print-width 120"
format_files "JavaScript" "$staged_js_files" "--use-tabs --print-width 120 --semi --single-quote=false --trailing-comma es5"

# Summary
echo -e "${BLUE}=================================================${NC}"

if [ ${#failed_files[@]} -gt 0 ]; then
    echo -e "${RED}‚ùå Failed to format ${#failed_files[@]} file(s):${NC}"
    for file in "${failed_files[@]}"; do
        echo -e "   ‚Ä¢ $file"
    done
    echo -e "${YELLOW}üí° Tip: Check if the syntax is valid${NC}"
fi

if [ ${#formatted_files[@]} -gt 0 ]; then
    echo -e "${GREEN}üéâ Successfully formatted ${#formatted_files[@]} file(s)${NC}"
    echo -e "${YELLOW}üìã Formatted files:${NC}"
    for file in "${formatted_files[@]}"; do
        echo -e "   ‚Ä¢ $file"
    done
fi

if [ ${#failed_files[@]} -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All files processed successfully${NC}"
    echo -e "${GREEN}üöÄ Pre-commit hook completed${NC}"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è  Some files failed to format. Commit will proceed with unformatted files.${NC}"
    echo -e "${YELLOW}üí° Fix the issues above and commit again for proper formatting.${NC}"
    exit 0
fi